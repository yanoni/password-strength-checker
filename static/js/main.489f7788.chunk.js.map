{"version":3,"sources":["components/PasswordStrengthMeter.js","containers/App.js","reportWebVitals.js","index.js"],"names":["PasswordStrengthMeter","props","pwdStrength","className","data-strength","App","useState","password","setPassword","setPwdStrength","isPasswordShown","setIsPasswordShown","pwdStrData","setPwdStrData","useEffect","requestOptions","method","headers","body","JSON","stringify","a","fetch","response","json","data","score","console","error","calculatePasswordStrength","guessTimeString","warning","suggestions","meterScore","warningTxt","suggestionsTxt","join","trim","pwdInfoDisplay","type","placeholder","value","onChange","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAkBeA,EAhBe,SAACC,GAE7B,IAAQC,EAAgBD,EAAhBC,YAER,OACI,qBAAKC,UAAU,8BAAf,SACE,qBACEA,UAAU,sBACVC,gBAAgBF,OC2FXG,G,MAzFH,WACV,MAAkCC,mBAAS,IAA3C,mBAAQC,EAAR,KAAkBC,EAAlB,KACA,EAAwCF,oBAAU,GAAlD,mBAAQJ,EAAR,KAAqBO,EAArB,KACA,EAAgDH,oBAAS,GAAzD,mBAAQI,EAAR,KAAyBC,EAAzB,KAKA,EAAsCL,mBAAS,IAA/C,mBAAQM,EAAR,KAAoBC,EAApB,KACAC,qBAAU,WACR,GAAKP,EAAL,CAKA,IACMQ,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE,SAAYb,MAGN,uCAAG,8BAAAc,EAAA,+EAEPC,MATf,mFAS0BP,GAFJ,cAExBQ,EAFwB,gBAGXA,EAASC,OAHE,OAGxBC,EAHwB,OAI9BZ,EAAcY,GACdhB,EAAegB,EAAKC,OALU,kDAQ9BC,QAAQC,MAAR,MAR8B,0DAAH,qDAW/BC,QAtBEpB,GAAgB,KAuBjB,CAACF,IAEJ,IAQQuB,EAA0ClB,EAA1CkB,gBAAiBC,EAAyBnB,EAAzBmB,QAASC,EAAgBpB,EAAhBoB,YAE5BC,EAAa1B,EAAWL,GAAe,EACvCgC,EAAaH,GAAoB,GACjCI,EAAiBH,EAAcA,EAAYI,KAAK,MAAMC,OAAS,GAGjEC,EAAiB,wBAcrB,OAbI/B,GAAaL,GAAe,GAAKA,GAAe,IAClDoC,EACE,gCACE,uBACA,oBAAGnC,UAAU,YAAb,8BAnDiB,CAAC,aAAc,QAAS,eAAgB,UAAW,gBAmDTD,MAC3D,uBACA,mDAAoB4B,EAApB,qCAAgEI,KAChE,mBAAG/B,UAAU,YAAb,SAA2BgC,IAC3B,2BAMJ,sBAAKhC,UAAU,gCAAf,UACE,gCACE,kDACA,mDAEF,uBACA,sBAAKA,UAAU,gBAAf,UACE,uBACEoC,KAAM7B,EAAkB,OAAS,WACjC8B,YAAY,kBACZC,MAAOlC,EACPmC,SAzCa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBnC,EAAYmC,EAAOF,UA0Cf,wBAAQtC,UAAU,aAAayC,QAvCJ,WAC/BjC,GAAmBD,IAsCf,SACGA,EAAkB,OAAS,SAE9B,cAAC,EAAD,CAAuBR,YAAa+B,OAErCK,OCpFQO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.489f7788.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PasswordStrengthMeter = (props) => {\r\n\r\n  const { pwdStrength } = props;\r\n\r\n  return (\r\n      <div className='strength-meter mt-2 visible' >\r\n        <div \r\n          className='strength-meter-fill'\r\n          data-strength={ pwdStrength }\r\n        >         \r\n        </div>\r\n      </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default PasswordStrengthMeter;","///////////////////////////////////////////////////////////////////////////////\r\n//\r\n//  Password Strength Checker in React JS\r\n//\r\n//  Developed by Anthony Yan\r\n//  June 13, 2021\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nimport React, { useState, useEffect } from 'react';\r\nimport PasswordStrengthMeter from '../components/PasswordStrengthMeter';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  const [ password, setPassword ] = useState('');\r\n  const [ pwdStrength, setPwdStrength ] = useState(-1);\r\n  const [ isPasswordShown, setIsPasswordShown ] = useState(true);\r\n  \r\n  const pwdStrengthStr = ['very weak!', 'weak!', 'fair/medium.', 'strong.', 'very strong.'];\r\n  \r\n  // Determine password strength through an API\r\n  const [ pwdStrData, setPwdStrData ] = useState({});\r\n  useEffect(() => {\r\n    if (!password) {\r\n      setPwdStrength(-1);\r\n      return;\r\n    }\r\n\r\n    const url = 'https://o9etf82346.execute-api.us-east-1.amazonaws.com/staging/password/strength'\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ 'password': password })\r\n    };    \r\n\r\n    const calculatePasswordStrength = async () => {\r\n      try {\r\n        const response = await fetch(url, requestOptions);\r\n        const data = await response.json();\r\n        setPwdStrData(data);\r\n        setPwdStrength(data.score);\r\n      }\r\n      catch(error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    calculatePasswordStrength();\r\n  }, [password]);\r\n    \r\n  const handleChange = ({ target }) => {\r\n    setPassword(target.value);\r\n  }\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setIsPasswordShown(isPasswordShown ? false : true );\r\n  }\r\n\r\n  const { guessTimeString, warning, suggestions } = pwdStrData;\r\n\r\n  const meterScore = password ? pwdStrength : -1;  // Meter all grayed out if password blank\r\n  const warningTxt = warning ? warning : '';\r\n  const suggestionsTxt = suggestions ? suggestions.join('  ').trim() : '';\r\n\r\n  // Build informational display about password strength\r\n  let pwdInfoDisplay = <div></div>;\r\n  if (password && (pwdStrength >= 0 && pwdStrength <= 4)) {\r\n    pwdInfoDisplay = (\r\n      <div>\r\n        <br />\r\n        <p className='bold-font' >Your password is {pwdStrengthStr[pwdStrength]}</p>\r\n        <br />\r\n        <p>{`It will take ${guessTimeString} to guess your password.  ${warningTxt}`}</p>\r\n        <p className='bold-font' >{suggestionsTxt}</p>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='main-container d-block m-auto'>\r\n      <div>        \r\n        <h3>Is your password</h3>\r\n        <h3>strong enough?</h3>\r\n      </div>\r\n      <br />\r\n      <div className='pwd-container'>\r\n        <input\r\n          type={isPasswordShown ? 'text' : 'password'}\r\n          placeholder='Type a password'\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <button className='showToggle' onClick={togglePasswordVisibility} >\r\n          {isPasswordShown ? 'hide' : 'show'}\r\n        </button>\r\n        <PasswordStrengthMeter pwdStrength={meterScore} />\r\n      </div>\r\n      {pwdInfoDisplay}      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}